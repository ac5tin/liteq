// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: queue/proto/queue.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LiteQClient is the client API for LiteQ service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LiteQClient interface {
	GetTasks(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (LiteQ_GetTasksClient, error)
	TaskStatusUpdate(ctx context.Context, in *TaskStatusUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetCurrentTasks(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*TaskListResponse, error)
}

type liteQClient struct {
	cc grpc.ClientConnInterface
}

func NewLiteQClient(cc grpc.ClientConnInterface) LiteQClient {
	return &liteQClient{cc}
}

func (c *liteQClient) GetTasks(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (LiteQ_GetTasksClient, error) {
	stream, err := c.cc.NewStream(ctx, &LiteQ_ServiceDesc.Streams[0], "/liteq.LiteQ/GetTasks", opts...)
	if err != nil {
		return nil, err
	}
	x := &liteQGetTasksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LiteQ_GetTasksClient interface {
	Recv() (*Task, error)
	grpc.ClientStream
}

type liteQGetTasksClient struct {
	grpc.ClientStream
}

func (x *liteQGetTasksClient) Recv() (*Task, error) {
	m := new(Task)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *liteQClient) TaskStatusUpdate(ctx context.Context, in *TaskStatusUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/liteq.LiteQ/TaskStatusUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liteQClient) AddTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/liteq.LiteQ/AddTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liteQClient) GetCurrentTasks(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*TaskListResponse, error) {
	out := new(TaskListResponse)
	err := c.cc.Invoke(ctx, "/liteq.LiteQ/GetCurrentTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LiteQServer is the server API for LiteQ service.
// All implementations must embed UnimplementedLiteQServer
// for forward compatibility
type LiteQServer interface {
	GetTasks(*GetTaskRequest, LiteQ_GetTasksServer) error
	TaskStatusUpdate(context.Context, *TaskStatusUpdateRequest) (*emptypb.Empty, error)
	AddTask(context.Context, *Task) (*emptypb.Empty, error)
	GetCurrentTasks(context.Context, *GetTaskRequest) (*TaskListResponse, error)
	mustEmbedUnimplementedLiteQServer()
}

// UnimplementedLiteQServer must be embedded to have forward compatible implementations.
type UnimplementedLiteQServer struct {
}

func (UnimplementedLiteQServer) GetTasks(*GetTaskRequest, LiteQ_GetTasksServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTasks not implemented")
}
func (UnimplementedLiteQServer) TaskStatusUpdate(context.Context, *TaskStatusUpdateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskStatusUpdate not implemented")
}
func (UnimplementedLiteQServer) AddTask(context.Context, *Task) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTask not implemented")
}
func (UnimplementedLiteQServer) GetCurrentTasks(context.Context, *GetTaskRequest) (*TaskListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentTasks not implemented")
}
func (UnimplementedLiteQServer) mustEmbedUnimplementedLiteQServer() {}

// UnsafeLiteQServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LiteQServer will
// result in compilation errors.
type UnsafeLiteQServer interface {
	mustEmbedUnimplementedLiteQServer()
}

func RegisterLiteQServer(s grpc.ServiceRegistrar, srv LiteQServer) {
	s.RegisterService(&LiteQ_ServiceDesc, srv)
}

func _LiteQ_GetTasks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetTaskRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LiteQServer).GetTasks(m, &liteQGetTasksServer{stream})
}

type LiteQ_GetTasksServer interface {
	Send(*Task) error
	grpc.ServerStream
}

type liteQGetTasksServer struct {
	grpc.ServerStream
}

func (x *liteQGetTasksServer) Send(m *Task) error {
	return x.ServerStream.SendMsg(m)
}

func _LiteQ_TaskStatusUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskStatusUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiteQServer).TaskStatusUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/liteq.LiteQ/TaskStatusUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiteQServer).TaskStatusUpdate(ctx, req.(*TaskStatusUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiteQ_AddTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiteQServer).AddTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/liteq.LiteQ/AddTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiteQServer).AddTask(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiteQ_GetCurrentTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiteQServer).GetCurrentTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/liteq.LiteQ/GetCurrentTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiteQServer).GetCurrentTasks(ctx, req.(*GetTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LiteQ_ServiceDesc is the grpc.ServiceDesc for LiteQ service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LiteQ_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "liteq.LiteQ",
	HandlerType: (*LiteQServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TaskStatusUpdate",
			Handler:    _LiteQ_TaskStatusUpdate_Handler,
		},
		{
			MethodName: "AddTask",
			Handler:    _LiteQ_AddTask_Handler,
		},
		{
			MethodName: "GetCurrentTasks",
			Handler:    _LiteQ_GetCurrentTasks_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetTasks",
			Handler:       _LiteQ_GetTasks_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "queue/proto/queue.proto",
}
